name: E-Commerce Data Pipeline CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1

jobs:
  # =============================================================================
  # CODE QUALITY & TESTING
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 isort bandit safety

      - name: Code formatting check
        run: |
          black --check --diff src/ tests/

      - name: Linting
        run: |
          flake8 src/ tests/ --max-line-length=88

      - name: Import sorting
        run: |
          isort --check-only --diff src/ tests/

      - name: Security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # =============================================================================
  # UNIT TESTING
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3,dynamodb,ecs,stepfunctions,logs
          DEBUG: 1
        ports:
          - 4566:4566

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov moto[all]

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

      - name: Setup LocalStack resources
        run: |
          python scripts/setup_local_aws.py

      - name: Run unit tests
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
          AWS_ENDPOINT_URL: http://localhost:4566
          ENVIRONMENT: local
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # =============================================================================
  # BUILD CONTAINERS
  # =============================================================================
  build-containers:
    name: Build and Push Containers
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      validation-image: ${{ steps.build-validation.outputs.image }}
      transformation-image: ${{ steps.build-transformation.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push validation image
        id: build-validation
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-pipeline-validation
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            src/validation/
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push transformation image
        id: build-transformation
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-pipeline-transformation
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            src/transformation/
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan images for vulnerabilities
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan images
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ steps.build-validation.outputs.image }}
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ steps.build-transformation.outputs.image }}

  # =============================================================================
  # TERRAFORM VALIDATION
  # =============================================================================
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive infrastructure/terraform/

      - name: Terraform Init
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform/environments/dev
          terraform validate

  # =============================================================================
  # DEPLOY TO DEV
  # =============================================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-containers, terraform-validate]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/environments/dev
          terraform init
          terraform plan -var="validation_image=${{ needs.build-containers.outputs.validation-image }}" \
                         -var="transformation_image=${{ needs.build-containers.outputs.transformation-image }}" \
                         -out=tfplan
          terraform apply tfplan

      - name: Run smoke tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          python scripts/smoke_tests.py --environment dev

      - name: Generate test data and verify
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          python scripts/test_data_generator.py --environment dev --num-files 2 --records-per-file 1000
          sleep 120  # Wait for processing
          python scripts/verify_results.py --environment dev

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/environments/staging
          terraform init
          terraform plan -var="validation_image=${{ needs.build-containers.outputs.validation-image }}" \
                         -var="transformation_image=${{ needs.build-containers.outputs.transformation-image }}" \
                         -out=tfplan
          terraform apply tfplan

      - name: Run integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          python scripts/integration_tests.py --environment staging

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    steps:
      - name: Manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Deploy to Production - ${{ github.sha }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/environments/prod
          terraform init
          terraform plan -var="validation_image=${{ needs.build-containers.outputs.validation-image }}" \
                         -var="transformation_image=${{ needs.build-containers.outputs.transformation-image }}" \
                         -out=tfplan
          terraform apply tfplan

      - name: Post-deployment verification
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          python scripts/post_deployment_tests.py --environment prod

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#data-engineering'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

---